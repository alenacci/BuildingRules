(declare-fun inRoom (Int) Bool)
(declare-fun noRule (Int) Bool)
(declare-fun noNumber () Int)
(declare-fun number () Int)
(declare-fun extTempInRoom (Int) Int)
(declare-fun tempInRoom (Int) Int)
(declare-fun time (Int) Real)
(declare-fun light (Int) Bool)
(declare-fun heat (Int) Bool)
(declare-fun cool (Int) Bool)
(declare-fun openWindows (Int) Bool)
(declare-fun openCurtains (Int) Bool)
(declare-fun sunny (Int) Bool)
(declare-fun socket (Int) Bool)
(declare-fun rainy (Int) Bool)
(declare-fun cloudy (Int) Bool)
(declare-fun day (Int) Int)
(declare-fun today (Int) Int)
(assert (forall ((x Int)) (and (=> (sunny x) (not (rainy x))) (=> (rainy x) (not (sunny  x))))))
(assert (forall ((x Int)) (and ( <= (time x) 23 ) ( >= (time x) 0 ))))
(assert (forall ((x Int)) (and ( <= (day x) 366 ) ( >= (day x) 0 ))))
(assert (=> (rainy 1) (not (openWindows 1))))
(assert (=> (and (>= (extTempInRoom 1) 55) (<= (extTempInRoom 1) 70)) (cool 1)))
(assert (=> (and (>= (tempInRoom 1) 70) (<= (tempInRoom 1) 89)) (heat 1)))
(assert (=> (and (>= (tempInRoom 1) 70) (<= (tempInRoom 1) 80)) (openWindows 1)))
(assert (=> (= (today 1) @val) (not (light 1))))
(assert (rainy 1))
(check-sat)
